{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Mobcast Technical Documentation","text":"<p>This documentation serves as a comprehensive resource for the Mobcast Tech team.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li><code>git clone git@bitbucket.org:mobcast_team/mobcast-core.git</code> - Clone the repository</li> <li><code>composer install</code> - Install dependencies</li> <li><code>php artisan serve</code> - Start development server</li> </ul>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<pre><code>docs/\n    architecture/    # System architecture documentation\n    api/             # API specifications and usage\n    deployment/      # Deployment guides\n    development/     # Development guidelines\n    troubleshooting/ # Common issues and solutions\n</code></pre>"},{"location":"#best-practices","title":"Best Practices","text":"<ul> <li>Follow the coding standards defined in our style guide</li> <li>Create unit tests for all new features</li> <li>Document API changes</li> <li>Review the architecture diagrams before making structural changes</li> </ul> <p>For additional support, contact the tech lead or refer to our internal knowledge base.</p>"},{"location":"git-branching/","title":"Git Branching Process","text":""},{"location":"git-branching/#1-overview","title":"1. Overview","text":"<p>This document outlines the Git branching strategy for efficient product development using Bitbucket. It ensures structured development, QA validation, and smooth deployment to production while maintaining Jira integration.</p>"},{"location":"git-branching/#key-branches","title":"Key Branches:","text":"<ul> <li>common-code-master: Production-ready code</li> <li>common-code-dev: Ongoing development</li> <li>release: QA-approved changes ready for production</li> </ul>"},{"location":"git-branching/#2-workflow-for-new-features","title":"2. Workflow for New Features","text":""},{"location":"git-branching/#step-1-create-a-jira-ticket","title":"Step 1: Create a Jira Ticket","text":"<p>Every new feature starts with a Jira ticket (e.g., DS-1234). Assign the ticket to the developer.</p>"},{"location":"git-branching/#step-2-create-a-feature-branch","title":"Step 2: Create a Feature Branch","text":"<p>Branch from common-code-master: <pre><code>git checkout common-code-master\ngit pull origin common-code-master\ngit checkout -b feature/DS-1234-feature-name\n</code></pre></p> <p>Naming convention: <code>feature/DS-&lt;JIRA-ID&gt;-short-description</code></p>"},{"location":"git-branching/#step-3-development-commits","title":"Step 3: Development &amp; Commits","text":"<p>Commit changes with Jira reference: <pre><code>git commit -m \"[DS-1234] Implemented new API endpoint\"\ngit push origin feature/DS-1234-feature-name\n</code></pre></p>"},{"location":"git-branching/#step-4-create-a-pull-request-pr","title":"Step 4: Create a Pull Request (PR)","text":"<p>PR should be from <code>feature/DS-1234-feature-name</code> \u2192 <code>common-code-dev</code>.</p>"},{"location":"git-branching/#step-5-code-review-merge-to-dev","title":"Step 5: Code Review &amp; Merge to Dev","text":"<p>Code is reviewed and merged into common-code-dev. Feature is tested in common-code-dev before moving to QA.</p>"},{"location":"git-branching/#step-6-move-to-release-branch-for-qa-approval","title":"Step 6: Move to Release Branch for QA Approval","text":"<p>Once QA approves a feature, it is cherry-picked or merged into release: <pre><code>git checkout release\ngit pull origin release\ngit merge --no-ff feature/DS-1234-feature-name\ngit push origin release\n</code></pre></p>"},{"location":"git-branching/#step-7-release-to-production","title":"Step 7: Release to Production","text":"<p>Create a PR from <code>release</code> \u2192 <code>common-code-master</code>. After approval, merge into common-code-master and deploy.</p>"},{"location":"git-branching/#3-workflow-for-hotfixes","title":"3. Workflow for Hotfixes","text":""},{"location":"git-branching/#step-1-create-a-jira-ticket_1","title":"Step 1: Create a Jira Ticket","text":"<p>A Jira ticket is mandatory for every hotfix (e.g., DS-5678).</p>"},{"location":"git-branching/#step-2-create-a-hotfix-branch-from-master","title":"Step 2: Create a Hotfix Branch from Master","text":"<p>Hotfixes should be based on common-code-master: <pre><code>git checkout common-code-master\ngit pull origin common-code-master\ngit checkout -b hotfix/DS-5678-critical-bugfix\n</code></pre></p>"},{"location":"git-branching/#step-3-fix-commit-changes","title":"Step 3: Fix &amp; Commit Changes","text":"<p>Commit with Jira reference: <pre><code>git commit -m \"[DS-5678] Fixed payment gateway timeout issue\"\n</code></pre></p>"},{"location":"git-branching/#step-4-create-a-pull-request-pr-merge-to-master","title":"Step 4: Create a Pull Request (PR) &amp; Merge to Master","text":"<p>PR should be from <code>hotfix/DS-5678-critical-bugfix</code> \u2192 <code>common-code-master</code>.</p>"},{"location":"git-branching/#step-5-merge-hotfix-back-to-dev-release","title":"Step 5: Merge Hotfix Back to Dev &amp; Release","text":"<p>To avoid conflicts, merge the hotfix into both common-code-dev and release: <pre><code>git checkout release\ngit merge --no-ff hotfix/DS-5678-critical-bugfix\ngit push origin release\n\ngit checkout common-code-dev\ngit merge --no-ff hotfix/DS-5678-critical-bugfix\ngit push origin common-code-dev\n</code></pre></p>"},{"location":"git-branching/#4-additional-best-practices","title":"4. Additional Best Practices","text":"<ul> <li>Branch Protection Rules: Require PR reviews and CI/CD checks for automated testing.</li> <li>Jira Automation: Auto-update Jira statuses upon merging.</li> <li>Feature Flags: Use feature toggles to control deployments.</li> </ul>"}]}